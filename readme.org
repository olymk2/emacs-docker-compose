# emacs-docker-compose
Tools for working with docker-compose locally in development

![Container Selector](/preview.gif?raw=true "Helm container selection")


Contributing
==

Consider putting this pre commit hook to run the tests before placing a PR.
You will need drone-cli to run these locally.

    ln -s .git_precommit.sh .git/hooks/pre-commit

#+BEGIN_SRC emacs-lisp
(dc-docker-compose-process "exec" "ims sh -c \"./vendor/bin/phpunit --filter=testCanBeCreatedFromValidEmailAddress ./test_php.php\"")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(dc-docker-compose-process "exec" "ims" "ls" "-la")
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
  (dc-process "*testBuffer*" "docker" "exec" "-it" "nginx" "ls" "-la")
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
    (dc-docker-exec "ims" "sh" "-c" "./vendor/bin/phpunit ./tests/phpunit")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (load-file "dc-core.el")
  (require 'dc-core)
  (load-file "~/.emacs/dc/dc-docker.el")
  (load-file "~/.emacs/dc/dc-docker-compose.el")
  (load-file "~/.emacs/dc/dc-tests.el")
  (load-file "~/.emacs/dc/dc-popups.el")
#+END_SRC

#+RESULTS:
: dc-core

#+BEGIN_SRC emacs-lisp
  ;; (load-file "dc-core.el")
  (load "dc-core")
  (load-file "~/.emacs/dc/dc-docker.el")
  (load-file "~/.emacs/dc/dc-docker-compose.el")
  (load-file "~/.emacs/dc/dc-tests.el")
  (load-file "~/.emacs/dc/dc-popups.el")
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs/dc/dc-popups.el")
#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC emacs-lisp
  ;; (load-file "dc-core.el")
  (load-directory "~/.emacs/dc")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(append (list "3" "4") (list((list "1" "2")))
#+END_SRC

#+RESULTS:
| 3 | 4 | 1 | 2 |


#+BEGIN_SRC emacs-lisp
(start-process "docker-emacs" "*Test Buffer*" "docker-compose" "exec" "ims ls")
#+END_SRC

#+RESULTS:
: #<process docker-emacs>


#+BEGIN_SRC emacs-lisp
  (defun testDC()
      (let ((dc-params (list "dc-process" "*testBuffer*" "docker" "exec" "-it" "nginx" "ls")))
        (message "%s" dc-params)
        (set-process-sentinel
         (apply 'start-process (list "dc-process" "*testBuffer*" "docker" "exec" "-it" "nginx" "ls")) 'dc-sentinel-gettext)))

  (testDC)
#+END_SRC

#+RESULTS:
: dc-sentinel-gettext

#+BEGIN_SRC emacs-lisp
(set-process-sentinel
(apply 'start-process (list "dc-process" "*testBuffer*" "docker" "exec" "-it" "nginx" "ls")) 'dc-sentinel-gettext)
#+END_SRC

#+RESULTS:
: dc-sentinel-gettext


#+BEGIN_SRC emacs-lisp
(apply 'start-process (list "dc-process" "*testBuffer*" "docker" "exec" "-it" "nginx" "ls"))
#+END_SRC

#+RESULTS:
: #<process dc-process>


#+BEGIN_SRC emacs-lisp
(start-process "dc-process" "*testBuffer*" "docker" "exec" "-it" "nginx" "ls")
#+END_SRC

#+RESULTS:
: #<process dc-process>


** docker methods
*** Pull image
#+BEGIN_SRC emacs-lisp
(dc-docker-pull "postgres")
#+END_SRC

#+RESULTS:
